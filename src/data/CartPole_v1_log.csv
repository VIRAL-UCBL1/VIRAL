path;env;llm;llm_param;algo;algo_param;total_timesteps;reward_function;rewards;mean_reward;std_reward;sr
data/model/CartPole-v1_344246_1.pth;CartPole-v1;qwen2.5-coder;{'seed': 344246};PPO;{'policy': 'MlpPolicy', 'verbose': 0, 'device': 'cpu', 'seed': 344246};20000;"def reward_func(observations: np.ndarray, is_success: bool, is_failure: bool) -> float:
    """"""Reward function for CartPole-v1

    Args:
        observations (np.ndarray): observation on the current state
        is_success (bool): True if the goal is achieved, False otherwise
        is_failure (bool): True if the episode ends unsuccessfully, False otherwise

    Returns:
        float: The reward for the current step
    """"""
    cart_position, cart_velocity, pole_angle, pole_angular_velocity = observations
    
    # Reward for being in a balanced state
    balance_reward = 0.5 - abs(pole_angle) / np.pi
    
    # Penalize for high cart velocity to discourage oscillation
    velocity_penalty = abs(cart_velocity)
    
    # Penalize for high angular velocity to discourage excessive movement
    angular_velocity_penalty = abs(pole_angular_velocity)
    
    # Final reward calculation
    reward = balance_reward - velocity_penalty - 0.1 * angular_velocity_penalty
    
    # Bonus reward if the goal is achieved
    if is_success:
        reward += 5.0
    
    # Penalty if the episode ends unsuccessfully
    if is_failure:
        reward -= 2.0

    return reward";-0.026266431,-0.017463248,-0.00081531884,-0.006315202,-0.03251267,-0.026490396,0.017912624,-0.019220838,-0.0046371124,-0.032494284,-0.019020105,-0.009938266,-0.022367546,-0.06617226,-0.01443981,-0.023477787,0.0001581264,-0.034284383,-0.035123985,-0.008536594,-0.02980919,-0.024798295,0.012893158,-0.005060743,0.019036908,-0.0045935716,-0.002619431,0.006221574,-0.01064354,-0.036707368,0.02580274,0.004703302,-0.026542688,-0.013898446,-0.010476387,0.00017295827,-0.0041363975,-0.005271319,-0.03466833,6.5462336e-05,-0.029985236,-0.019116802,-0.035804834,0.0034302736,-0.016148606,-0.060538124,-0.029396906,0.028945923,-0.002553621,-0.015436522,-0.024062479,-0.011591273,-0.008362287,-0.0061307955,-0.014558845,-0.032365065,-0.01847835,-0.0006380841,-0.032122254,-0.033328414,-0.015766561,-0.0040199906,-0.016129063,-0.022230865,-0.0067779343,-0.011182308,-0.005979132,0.004815084,-0.018357111,-0.02140067,-0.0052345563,-0.007673752,-0.023778735,0.0452674,0.009747438,-0.014666978,0.0077210683,-0.033043597,-0.030537138,-0.05305522,-0.0022285813,-0.029257784,0.006416351,-0.01737269,-0.0030884624,-0.020920552,0.015661543,0.00259266,-0.04732646,0.0067404956,-0.0022671528,0.03395256,0.013509969,0.012858507,-0.005648495,-0.008859875,-0.020269964,0.023573268,-0.029113205,0.012627737,0.031128494,-0.020382715,0.0068454365,-0.031837914,0.0145299835,-0.025967853,-0.03372014,-0.0037368925,-0.032474503,0.013051045,-0.024454644,0.010266839,0.009817027,0.023719588,-0.01897714,-0.010694161,-0.015257577,-0.019834174,-0.013120772,0.0029324382,-0.026396625,-0.0155164115,-0.01779407,0.017271558,-0.009364977,0.012893271,-0.0057425047,0.01124396,0.0056359987,0.015874764,-0.0019094493,0.007064403,-0.012251009,0.00804338,-0.034930196,-0.008514551,0.02879522,0.046146285,-0.015252637,0.01971329,-0.028401647,0.029938469,-0.017656732,-0.014459708,-0.0018263154,-0.022025986,0.015095948,-0.026151484,0.0018158008,0.0036844627,-0.035256334,0.012348877,0.00020007121,0.00932221,0.015578209,0.019523498,0.008464363,0.010494622,0.056629915,0.03967651,-0.01416211,0.0070501547,-0.014291451,0.0069343206,0.01960009,0.04152008,-0.022885324,0.041430857,0.028437112,0.016436853,0.024652777,0.05824699,0.039709397,0.023321401,0.008225095,-0.013248408,0.016953252,0.032507896,0.022588378,0.028594647,0.03663878,0.027270157,-0.0046976525,0.05651168,0.03134702,-0.0033205706,0.015344887,0.011342273,0.020872952,-0.015651476,0.025465807,-0.020776123,0.021547176,0.0009940322,0.04285816,-0.009481984,0.00891043,-0.01926886,0.032997247,0.034403883,0.0010077443,0.04776616,-0.022723416,0.04218427,0.029528446,0.0023868561,0.045259394,0.0073871473,-0.0131126605,0.0008743367,0.00864125,0.030612485,-0.013649208,-0.009494376,0.0045712157,0.024649184,0.059152666,0.028510194,0.025482925,0.021590935,0.060721427,-0.0056628715,0.036222585,0.028233685,0.04432802,0.0404265,0.054665588,0.006864422,0.026271652,0.03871986,0.072829776,0.035570733,0.022239124,0.05289005,0.10168042,0.019226985,0.03746874,0.0087947305,0.08383051,0.036184646,0.035154797,0.026523491,0.030912349,0.0068267295,0.067639396,0.038229678,0.041820735,0.04340711,0.0388745,0.035221763,0.05009698,0.040294483,0.018828029,0.015129788,0.027117647,0.058950167,0.102678336,0.055054903,0.0313848,0.028162729,0.025477586,0.039502904,0.019924466,0.0295583,0.04352722,0.04431657,0.03134436,0.11190576,0.10887248,0.036031708,0.022297628,0.06495469,0.044675164,0.037973657,0.05086129,0.059081234,0.06531389,0.040217504,0.041563477,0.07364945,0.046674233,0.051101014,0.024605162,0.046920184,0.040035132,0.027230462,0.09981043,0.062391855,0.021532293,0.042209107,0.045335747,0.034709044,0.03692662,0.11134543,0.021469021,0.06723079,0.046846975,-0.01762227,0.100791365,0.03978337,0.024612142,0.0396674,0.055889126,0.08245998,0.065726876,0.0326905,0.03319533,0.03259948,0.069918156,0.04045514,0.03267251,0.003054429,0.026979022,0.07193525,0.022991566,0.051776707,0.02665995,0.058583416,0.06966025,0.04515369,0.05296589,0.027429383,0.051392574,0.08539421,0.054302406,0.039660547,0.058692954,0.07798597,0.068534344,0.03508943,0.078331225,0.014727223,0.090428725,0.038281996,0.025841303,0.042722493,0.037761625,0.026887689,0.054447565,0.05398805,0.04570596,0.045267582,0.03250938,0.036444694,0.02542721,0.06830816,0.04000922,0.11670154,0.052613407,0.032827903,0.02739105,0.061581876,0.060006503,0.028787944,0.06445419,0.05498009,0.06147009,0.037611924,0.023741184,0.048107043,0.045666624,0.060329784,0.02857873,0.04855437,0.05030022,0.039016962,0.06536985,0.032051124,0.027845897,0.019886281,0.035269804,0.05165377,0.024294663,0.086470366,0.04027516,0.07313376,0.04526525,0.06933942,0.055579923,0.04301483,0.052106977,0.030812748,0.04146448,0.03656381,0.058530875,0.060973376,0.027328042,0.051207386,0.06173327,0.04256531,0.046891868,0.08146095,0.042978074,0.05102182,0.034494348,0.030793421,0.04223217,0.07239627,0.05675552,0.07145317,0.050050516,0.027823608,0.05646444,0.04160101,0.049950562,0.032666102,0.06806749,0.044318426,0.08038904,0.0353665,0.04615937,0.049562983,0.07162593,0.13109203,0.10073171,0.03221705,0.039867822,0.040267978,0.03955433,0.0295098,0.060223293,0.02666676,0.06465575,0.059749316,0.070498034,0.029246325,0.02617803,0.025315268,0.0552124,0.09146887,0.0738323,0.14224875,0.039719835,0.086316265,0.057380345,0.07265621,0.03582823,0.035754498,0.038562376,0.07602378,0.12610006,0.035914443,0.07221051,0.03240887,0.062755056,0.04172717,0.04538709,0.0431404,0.035272744,0.11477041,0.058412425,0.07201019,0.029192584,0.049985155,0.08588558,0.025686827,0.061105143,0.031352904,0.040772296,0.09429585,0.04646694,0.041429304,0.031889744,0.06703302,0.043451928,0.07708406,0.060564052,0.11682228,0.06315366,0.0468615,0.06385658,0.065271094,0.059817314,0.04470865,0.0649541,0.1001014,0.037934463,0.07630119,0.081277706,0.04929817,0.04888715,0.06694197,0.046403985,0.044624873,0.04788812,0.09978513,0.053910755,0.06002124,0.057766564,0.031641617,0.032986984,0.029307785,0.10877702,0.06925697,0.13977471,0.057886418,0.05945343,0.04995986,0.044161055;0.027825406;0.035067856;0.0
data/model/CartPole-v1_344246_2.pth;CartPole-v1;qwen2.5-coder;{'seed': 344246};PPO;{'policy': 'MlpPolicy', 'verbose': 0, 'device': 'cpu', 'seed': 344246};20000;"import numpy as np

def reward_func(observations: np.ndarray, is_success: bool, is_failure: bool) -> float:
    """"""Reward function for CartPole-v1

    Args:
        observations (np.ndarray): observation on the current state
        is_success (bool): True if the goal is achieved, False otherwise
        is_failure (bool): True if the episode ends unsuccessfully, False otherwise

    Returns:
        float: The reward for the current step
    """"""
    cart_position, cart_velocity, pole_angle, pole_angular_velocity = observations
    
    # Balance reward: quadratic term to penalize large angles and encourage balanced state
    balance_reward = 1.0 - (pole_angle / np.pi) ** 2
    
    # Velocity penalty: quadratic term to discourage excessive movement
    velocity_penalty = 0.1 * cart_velocity ** 2
    
    # Angular velocity penalty: linear term to discourage excessive rotational movement
    angular_velocity_penalty = abs(pole_angular_velocity)
    
    # Final reward calculation
    reward = balance_reward - velocity_penalty - 0.1 * angular_velocity_penalty
    
    # Bonus reward if the goal is achieved
    if is_success:
        reward += 5.0
    
    # Penalty if the episode ends unsuccessfully
    if is_failure:
        reward -= 2.0

    return reward";0.0029867063,0.005406256,0.009458933,0.009861696,0.015811786,0.005165772,0.014151459,0.0069791353,0.011066047,0.005337124,0.004309009,0.013559978,0.008349303,0.014334257,0.00874043,0.0036822155,0.00740727,0.0026245434,0.021594137,0.011946389,0.0060425913,0.0073780785,0.01509069,0.009519222,0.01417345,0.0104000075,0.011543989,0.013867648,0.008239539,0.0036680123,0.02280691,0.009608453,0.0045523066,0.0070644664,0.006109642,0.023256864,0.011547113,0.0062227123,0.008566486,0.007917187,0.009757888,0.029889667,0.013379956,0.015871253,0.005433248,0.022628404,0.005503788,0.020139875,0.026174804,0.0054854597,0.007850569,0.006111618,0.012335615,0.006765889,0.0043960665,0.0038478556,0.0069384766,0.0101309465,0.00993375,0.006923976,0.007013234,0.008886608,0.0048992615,0.025850479,0.01145637,0.009340535,0.010869126,0.012507143,0.0053467955,0.026853299,0.017690731,0.010458615,0.0051804995,0.026369382,0.029094607,0.0049754553,0.025368137,0.02907238,0.0033705232,0.03169414,0.008385063,0.0050522443,0.010801487,0.0054083234,0.01060921,0.004803135,0.027040912,0.03165602,0.018117385,0.00909182,0.02847436,0.015232573,0.011340697,0.00695396,0.010354921,0.007608183,0.0036344724,0.011174165,0.006390041,0.038060457,0.019637248,0.012451031,0.008758041,0.003491008,0.0026036056,0.0062683173,0.021811543,0.004676339,0.02865383,0.010198086,0.017101586,0.01850427,0.0124491695,0.004959415,0.030333886,0.014443897,0.023720112,0.0053556394,0.013713502,0.01128977,0.0043454166,0.033339143,0.004045924,0.009216024,0.0071067926,0.018196775,0.033099514,0.0071568056,0.012060198,0.0063469904,0.008825659,0.0084580295,0.004974274,0.004987368,0.022760596,0.013442888,0.006199172,0.012202412,0.04685517,0.0104490975,0.010098,0.0034968494,0.0069348793,0.01680616,0.004629785,0.0065170615,0.022785135,0.006104354,0.011733495,0.0071858377,0.010737275,0.011908568,0.010858431,0.015054301,0.016975328,0.02965385,0.011825333,0.020048942,0.036536455,0.0076346523,0.009900324,0.012204808,0.009491335,0.00964264,0.006063222,0.016866324,0.024384588,0.012043465,0.015817426,0.038020514,0.022336086,0.011410792,0.045028053,0.030321537,0.0131250955,0.053128786,0.019835647,0.0061930344,0.021013768,0.013150151,0.011873886,0.016278682,0.012798743,0.021782601,0.0053478,0.015601626,0.007102305,0.014497337,0.013362248,0.013603823,0.003922187,0.008819342,0.010552782,0.011332189,0.049567122,0.006051569,0.0074299583,0.02431126,0.0105618825,0.010953327,0.014947922,0.031089587,0.032305203,0.008011703,0.006029608,0.013302901,0.03671836,0.0047145537,0.016715184,0.02165649,0.004169273,0.008169571,0.015617826,0.015327367,0.032096934,0.06286992,0.013001203,0.025983645,0.053305145,0.013630017,0.060103778,0.025161233,0.03390925,0.047406223,0.01848995,0.012992832,0.026556754,0.025463298,0.049596176,0.080040894,0.013055656,0.049811948,0.019242544,0.01415221,0.014674186,0.04591246,0.053630803,0.05579556,0.032103937,0.022059461,0.009650629,0.018685605,0.042343996,0.028346185,0.022485305,0.017379852,0.060313266,0.05749794,0.024104828,0.04401283,0.04778782,0.05348996,0.03523057,0.035585806,0.07636886,0.046957385,0.07983037,0.044771872,0.038025163,0.1066016,0.07819973,0.047083456,0.026765171,0.0539514,0.040006034,0.025851982,0.05039306,0.035094045,0.062102728,0.059006397,0.05971506,0.08569368,0.08177906,0.10188265,0.06146248,0.07226077,0.0843947,0.07054465,0.06126101,0.0866069,0.08324066,0.094211765,0.07287209,0.08757815,0.05097283,0.142685,0.06182002,0.2325871,0.09543697,0.12988499,0.08283704,0.062569976,0.12861139,0.12771274,0.12373745,0.15363748,0.19189419,0.16553995,0.10982593,0.010372901,0.13253608,0.19106193,0.22219078,0.20027389,0.16623549,0.14755085,0.24632925,0.16772892,0.2537313,0.2796148,0.2153666;0.033337846;0.04586962;0.86
data/model/CartPole-v1_459790_1.pth;CartPole-v1;qwen2.5-coder;{'seed': 459790};PPO;{'policy': 'MlpPolicy', 'verbose': 0, 'device': 'cpu', 'seed': 459790};20000;"def reward_func(observations: np.ndarray, is_success: bool, is_failure: bool) -> float:
    """"""Reward function for CartPole-v1

    Args:
        observations (np.ndarray): observation on the current state
        is_success (bool): True if the goal is achieved, False otherwise
        is_failure (bool): True if the episode ends unsuccessfully, False otherwise

    Returns:
        float: The reward for the current step
    """"""
    pole_angle = observations[2]
    
    if is_success:
        return 10.0  # Goal achieved
    elif is_failure:
        return -5.0  # Episode ended unsuccessfully
    
    reward = np.exp(-np.abs(pole_angle / (0.418 * 3)))  # Reward based on pole angle proximity to 0 radians
    
    if observations[3] < 0:  # Penalize high negative angular velocity
        reward *= 0.95
    
    return reward";0.005237119,0.0039290553,0.0037178602,0.007766503,0.002326616,0.00325643,0.0048797363,0.008055559,0.020562144,0.004461219,0.0029477156,0.007032483,0.0050775683,0.002281684,0.0013917777,0.0038838943,0.0055273175,0.0072172,0.0034697822,0.0065686195,0.0062768627,0.008130972,0.0061110826,0.0170871,0.004887697,0.023416024,0.00283222,0.0045993947,0.0075617237,0.026354384,0.0060176733,0.020527612,0.0041796914,0.010868064,0.009114418,0.010075028,0.016574789,0.007106833,0.0027341794,0.0033584947,0.0050821174,0.019003281,0.0026149384,0.0015420684,0.0013769105,0.010882657,0.0053662374,0.0062574367,0.00804476,0.013656584,0.005233,0.004959378,0.010240006,0.009062597,0.0038038522,0.003868415,0.0018168126,0.002217265,0.008447824,0.00823774,0.013512316,0.0040590824,0.009576656,0.0024857444,0.003885125,0.0124511095,0.00306373,0.009567892,0.0082424525,0.0065677413,0.008312363,0.009758687,0.007839297,0.0044089025,0.012720451,0.005573217,0.002583826,0.0026064515,0.005668679,0.0039151013,0.012836905,0.0021407842,0.011405915,0.0040624742,0.0023545548,0.00575134,0.0020405508,0.017675012,0.011921776,0.0044333395,0.0011951232,0.0026601672,0.003065986,0.0033929213,0.0031494312,0.0047781616,0.0016040063,0.009940378,0.006380472,0.006506169,0.008959058,0.0029405826,0.0020575929,0.009662904,0.025102291,0.00892199,0.03502399,0.0066713295,0.0049381666,0.012043919,0.0089615155,0.022265421,0.012964435,0.0023643235,0.004099145,0.0027476551,0.0061241863,0.0077986494,0.017004788,0.0065585375,0.01649041,0.013808228,0.0070927385,0.0035457073,0.013398084,0.031418774,0.004280674,0.012531238,0.0064767925,0.006930481,0.01846766,0.003235375,0.0086779995,0.010059078,0.0121388715,0.022710644,0.0062358533,0.015276711,0.013134383,0.021264711,0.0096434755,0.005942336,0.0071171448,0.0039214594,0.025046716,0.0059088985,0.012088128,0.021062387,0.003466177,0.012453846,0.016822841,0.0095268795,0.011380213,0.012178772,0.019675465,0.019432647,0.009523187,0.026002852,0.007845155,0.0027262305,0.00903143,0.018039674,0.016937159,0.001256787,0.022465074,0.0011973048,0.017255679,0.0021054235,0.016290762,0.026735883,0.012401785,0.029296914,0.0018160073,0.025843052,0.02887282,0.017908437,0.0285095,0.014639573,0.023678921,0.027764853,0.026227657,0.029620854,0.014299851,0.013564654,0.032737758,0.00568263,0.026404828,0.006024198,0.010206207,0.06898771,0.01884399,0.010781143,0.010101097,0.006583466,0.01846195,0.011774149,0.0030194188,0.0062495894,0.010727098,0.015272062,0.022478873,0.021574402,0.04373518,0.016296623,0.01868487,0.026904985,0.015311123,0.0066736666,0.007845092,0.00877961,0.011731644,0.01700289,0.02747768,0.03336323,0.038827173,0.051779583,0.029882023,0.03808754,0.086196855,0.04066931,0.028218793,0.04422917,0.009530315,0.02011524,0.029425932,0.036234234,0.010206012,0.028361525,0.010940912,0.021688566,0.04552347,0.02389262,0.022045413,0.035477478,0.009263448,0.039331533,0.06400255,0.044109497,0.018010953,0.009725228,0.007974247,0.062206235,0.007873264,0.025454128,0.035822313,0.064531736,0.082774356,0.029701587,0.041982535,0.07328819,0.013874248,0.07356605,0.06402025,0.05778391,0.022615654,0.03538944,0.026760004,0.04591166,0.02367208,0.09283806,0.014993808,0.08118987,0.043627623,0.02441872,0.058578156,0.058521774,0.1040647,0.05860446,0.027823795,0.16685866,0.033455987,0.027080024,0.113342986,0.028471407,0.096683614,0.122809105,0.121894345,0.060554698,0.19730484,0.06920549,0.100514576,0.08654693,0.1290131,0.053096257,0.07664522,0.116086416,0.15304223,0.23902948,0.14264545,0.11658078,0.21727163,0.07955182,0.11299536,0.23584412,0.25931165,0.24675412,0.15054077,0.25987902,0.25825605,0.25544062,0.2555902;0.030341443;0.04900669;0.46
